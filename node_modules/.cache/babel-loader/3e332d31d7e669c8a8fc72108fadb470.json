{"ast":null,"code":"var _jsxFileName = \"/Users/tiffanywong/Documents/juno/bootcamp/week6/tiffanyWongProjectFive/src/Result.js\";\nimport React, { Component } from \"react\";\nimport Chart from \"chart.js\";\n\nclass Result extends Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n    this.state = {\n      labels: []\n    };\n\n    this.consolidateTrans = () => {\n      const consolidateCat = this.props.expenseArray.reduce((acc, trans) => {\n        acc[trans.categories] = [...(acc[trans.categories] || []), trans];\n        return acc;\n      }, {});\n      return Object.keys(consolidateCat).map(category => {\n        if (consolidateCat[category] === undefined) {\n          return;\n        } else {\n          const consolidateTotal = consolidateCat[category].reduce((accTotal, trans) => {\n            accTotal += parseFloat(trans.amount);\n            return accTotal;\n          }, 0);\n          return \"\".concat(category, \": \").concat(consolidateTotal);\n        }\n      });\n    };\n  }\n\n  componentDidUpdate() {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    const _this$props = this.props,\n          expenseArray = _this$props.expenseArray,\n          expenseAmountArray = _this$props.expenseAmountArray,\n          expenseCat = _this$props.expenseCat;\n    new Chart(myChartRef, {\n      type: \"horizontalBar\",\n      data: {\n        //Bring in data\n        labels: this.consolidateTrans().map(c => {\n          return c.split(': ')[0];\n        }),\n        datasets: [{\n          label: \"Expense ($)\",\n          data: this.consolidateTrans().map(c => {\n            return c.split(': ')[1];\n          }),\n          backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n          borderColor: \"rgba(75, 192, 192, 1)\",\n          borderWidth: 1\n        }]\n      },\n      options: {\n        //Customize chart options\n        legend: {\n          labels: {\n            fontSize: 18\n          }\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              beginAtZero: true,\n              fontSize: 18\n            }\n          }],\n          yAxes: [{\n            type: 'category',\n            ticks: {\n              fontSize: 18\n            }\n          }]\n        }\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Result;","map":{"version":3,"sources":["/Users/tiffanywong/Documents/juno/bootcamp/week6/tiffanyWongProjectFive/src/Result.js"],"names":["React","Component","Chart","Result","chartRef","createRef","state","labels","consolidateTrans","consolidateCat","props","expenseArray","reduce","acc","trans","categories","Object","keys","map","category","undefined","consolidateTotal","accTotal","parseFloat","amount","componentDidUpdate","myChartRef","current","getContext","expenseAmountArray","expenseCat","type","data","c","split","datasets","label","backgroundColor","borderColor","borderWidth","options","legend","fontSize","scales","xAxes","ticks","beginAtZero","yAxes","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Chart from \"chart.js\";\n\nclass Result extends Component {\n  chartRef = React.createRef();\n  state = {\n    labels: []\n  }\n\n  componentDidUpdate() {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    const {expenseArray, expenseAmountArray, expenseCat} = this.props\n    new Chart(myChartRef, {\n      type: \"horizontalBar\",\n      data: {\n        //Bring in data\n        labels: this.consolidateTrans().map((c) => { return c.split(': ')[0] }),\n        datasets: [\n          {\n            label: \"Expense ($)\",\n            data: this.consolidateTrans().map((c) => {return c.split(': ')[1]}),\n            backgroundColor:                  \"rgba(75, 192, 192, 0.2)\",\n            borderColor: \n              \"rgba(75, 192, 192, 1)\",\n            borderWidth: 1,\n          }\n        ],\n      },\n      options: {\n        //Customize chart options\n        legend: {\n          labels: {\n            fontSize: 18\n          }\n        },\n        scales: {\n          xAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n                fontSize: 18\n              }\n            }\n          ],\n          yAxes: [\n            {\n              type: 'category',\n              ticks: {\n                fontSize: 18\n              }\n            }\n          ]\n        }\n      }\n    });\n  }\n\n\n  consolidateTrans = () => {\n    const consolidateCat =\n    this.props.expenseArray.reduce((acc, trans) => {\n      acc[trans.categories] = [...acc[trans.categories] || [], trans];\n      return acc;\n      }, {});\n\n      return Object.keys(consolidateCat).map((category) => {\n        if (consolidateCat[category] === undefined) {\n            return\n          } else {\n            const consolidateTotal = consolidateCat[category].reduce((accTotal, trans) => {\n              accTotal += parseFloat(trans.amount)\n              return accTotal;\n            }, 0)\n            return `${category}: ${consolidateTotal}`;\n          }\n      })\n    }\n    \n  render() {\n    return (\n      <div>\n        <canvas\n          id=\"myChart\"\n          ref={this.chartRef}\n      />\n      </div>\n    )\n  }\n}\n\nexport default Result"]},"metadata":{},"sourceType":"module"}