{"ast":null,"code":"var _jsxFileName = \"/Users/tiffanywong/Documents/juno/bootcamp/week6/tiffanyWongProjectFive/src/Result.js\";\nimport React, { Component } from \"react\";\nimport Chart from \"chart.js\";\n\nclass Result extends Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n    this.state = {\n      labels: []\n    };\n\n    this.handleSubtotal = array => {\n      return array.reduce((a, b) => parseFloat(a) + parseFloat(b), 0).toFixed(2);\n    };\n\n    this.handleSubtotal = array => {\n      return array.reduce((a, b) => parseFloat(a) + parseFloat(b), 0).toFixed(2);\n    };\n\n    this.handleTotal = () => {\n      const arr1 = this.handleSubtotal(this.props.incomeAmountArray);\n      const arr2 = this.handleSubtotal(this.props.expenseAmountArray);\n      return (arr1 - arr2).toFixed(2);\n    };\n  }\n\n  componentDidUpdate() {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    const _this$props = this.props,\n          expenseArray = _this$props.expenseArray,\n          expenseAmountArray = _this$props.expenseAmountArray,\n          expenseCat = _this$props.expenseCat;\n    new Chart(myChartRef, {\n      type: \"horizontalBar\",\n      data: {\n        //Bring in data\n        labels: expenseArray.map(data => data.categories),\n        datasets: [{\n          label: \"Expense Result\",\n          data: expenseArray.map(data => data.amount),\n          backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(255, 206, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(255, 159, 64, 0.2)\"],\n          borderColor: [\"rgba(255, 99, 132, 1)\", \"rgba(54, 162, 235, 1)\", \"rgba(255, 206, 86, 1)\", \"rgba(75, 192, 192, 1)\", \"rgba(153, 102, 255, 1)\", \"rgba(255, 159, 64, 1)\"],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        //Customize chart options\n        legend: {\n          labels: {\n            fontSize: 22\n          }\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              beginAtZero: true,\n              fontSize: 22\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              fontSize: 22\n            }\n          }]\n        }\n      }\n    });\n  }\n\n  render() {\n    let group = this.props.expenseArray.reduce((r, a) => {\n      // console.log(\"a\", a);\n      // console.log('r', r);\n      r[a.categories] = [...(r[a.categories] || []), a];\n      return r;\n    }, {});\n    console.log(\"group\", group);\n    let a = group.food.map(b => {\n      console.log(b);\n    });\n    console.log(group.food); // console.log(this.props.expenseArray);\n    // const array1 = this.reduceArray(this.props.expenseArray)\n    // console.log(array1);\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, this.handleTotal() >= 0 ? React.createElement(\"h3\", {\n      className: \"colorPositive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \" Balance: $ \", this.handleTotal(), \" \") : React.createElement(\"h3\", {\n      className: \"colorNegative\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \" Balance: $ \", this.handleTotal(), \" \"), React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Result;","map":{"version":3,"sources":["/Users/tiffanywong/Documents/juno/bootcamp/week6/tiffanyWongProjectFive/src/Result.js"],"names":["React","Component","Chart","Result","chartRef","createRef","state","labels","handleSubtotal","array","reduce","a","b","parseFloat","toFixed","handleTotal","arr1","props","incomeAmountArray","arr2","expenseAmountArray","componentDidUpdate","myChartRef","current","getContext","expenseArray","expenseCat","type","data","map","categories","datasets","label","amount","backgroundColor","borderColor","borderWidth","options","legend","fontSize","scales","xAxes","ticks","beginAtZero","yAxes","render","group","r","console","log","food"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Chart from \"chart.js\";\n\nclass Result extends Component {\n  chartRef = React.createRef();\n  state = {\n    labels: []\n  }\n\n\n  handleSubtotal = (array) => {\n    return array.reduce((a, b) =>\n      parseFloat(a) + parseFloat(b), 0\n    ).toFixed(2)\n  }\n  componentDidUpdate() {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    const {expenseArray, expenseAmountArray, expenseCat} = this.props\n    new Chart(myChartRef, {\n      type: \"horizontalBar\",\n      data: {\n        //Bring in data\n        labels: expenseArray.map((data) => data.categories),\n        datasets: [\n          {\n            label: \"Expense Result\",\n            data: expenseArray.map((data) => data.amount),\n            backgroundColor: [\n              \"rgba(255, 99, 132, 0.2)\",\n              \"rgba(54, 162, 235, 0.2)\",\n              \"rgba(255, 206, 86, 0.2)\",\n              \"rgba(75, 192, 192, 0.2)\",\n              \"rgba(153, 102, 255, 0.2)\",\n              \"rgba(255, 159, 64, 0.2)\"\n            ],\n            borderColor: [\n              \"rgba(255, 99, 132, 1)\",\n              \"rgba(54, 162, 235, 1)\",\n              \"rgba(255, 206, 86, 1)\",\n              \"rgba(75, 192, 192, 1)\",\n              \"rgba(153, 102, 255, 1)\",\n              \"rgba(255, 159, 64, 1)\"\n            ],\n            borderWidth: 1\n          }\n        ],\n      },\n      options: {\n        //Customize chart options\n        legend: {\n          labels: {\n            fontSize: 22\n          }\n        },\n        scales: {\n          xAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n                fontSize: 22\n              }\n            }\n          ],\n          yAxes: [\n            {\n              ticks: {\n                fontSize: 22\n              }\n            }\n          ]\n        }\n      }\n    });\n  }\n\n  handleSubtotal = (array) => {\n    return array.reduce((a, b) =>\n      parseFloat(a) + parseFloat(b), 0\n    ).toFixed(2)\n  }\n\n  handleTotal = () => {\n    const arr1 = this.handleSubtotal(this.props.incomeAmountArray);\n    const arr2 = this.handleSubtotal(this.props.expenseAmountArray);\n    return (arr1 - arr2).toFixed(2)\n  }\n\n  render() {\n    let group = this.props.expenseArray.reduce((r, a) => {\n      // console.log(\"a\", a);\n      // console.log('r', r);\n      r[a.categories] = [...r[a.categories] || [], a];\n      return r;\n    }, {});\n    console.log(\"group\", group);\n\n    let a = group.food.map((b) => {\n      console.log(b);\n      \n    })\n    console.log(group.food);\n    \n    // console.log(this.props.expenseArray);\n\n    // const array1 = this.reduceArray(this.props.expenseArray)\n    // console.log(array1);\n    \n    return (\n      <div>\n        {this.handleTotal() >= 0 ?\n\n          <h3 className=\"colorPositive\"> Balance: $ {this.handleTotal()} </h3>\n\n          :\n\n        <h3 className=\"colorNegative\"> Balance: $ {this.handleTotal()} </h3>}\n        <canvas\n          id=\"myChart\"\n          ref={this.chartRef}\n      />\n      </div>\n    )\n  }\n}\n\nexport default Result"]},"metadata":{},"sourceType":"module"}