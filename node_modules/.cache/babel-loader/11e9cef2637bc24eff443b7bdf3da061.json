{"ast":null,"code":"var _jsxFileName = \"/Users/tiffanywong/Documents/juno/bootcamp/week6/tiffanyWongProjectFive/src/Result.js\";\nimport React, { Component } from \"react\";\nimport Chart from \"chart.js\";\n\nclass Result extends Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n    this.state = {\n      labels: []\n    };\n\n    this.reduceArray = (objectArray, property) => {// objectArray.reduce((total, trans) => {\n      //   console.log(total, trans.categories); \n      //   if (trans.categories) {\n      //     let amount = parseFloat(trans.amount)\n      //     total += amount\n      //     // data.amount = amount\n      //     console.log(total,amount);\n      //     trans.amount = total\n      //   }\n      //   console.log(trans);\n      //   return total\n      // }, 0)\n      // return objectArray.reduce((acc,obj) => {\n      //   console.log(acc, obj, property);\n      //   let key = obj[property]\n      //   if (!acc[key]) {\n      //     acc[key] = []\n      //   }\n      //   acc[key].push(obj)\n      //   return acc\n      // }, {})\n    };\n\n    this.handleSubtotal = array => {\n      return array.reduce((a, b) => parseFloat(a) + parseFloat(b), 0).toFixed(2);\n    };\n\n    this.handleSubtotal = array => {\n      return array.reduce((a, b) => parseFloat(a) + parseFloat(b), 0).toFixed(2);\n    };\n\n    this.handleTotal = () => {\n      const arr1 = this.handleSubtotal(this.props.incomeAmountArray);\n      const arr2 = this.handleSubtotal(this.props.expenseAmountArray);\n      return (arr1 - arr2).toFixed(2);\n    };\n  }\n\n  groupBy(list, keyGetter) {\n    const map = new Map();\n    list.forEach(item => {\n      const key = keyGetter(item);\n      const collection = map.get(key);\n\n      if (!collection) {\n        map.set(key, [item]);\n      } else {\n        collection.push(item);\n      }\n    });\n    return map;\n  }\n\n  componentDidUpdate() {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    const _this$props = this.props,\n          expenseArray = _this$props.expenseArray,\n          expenseAmountArray = _this$props.expenseAmountArray,\n          expenseCat = _this$props.expenseCat;\n    new Chart(myChartRef, {\n      type: \"horizontalBar\",\n      data: {\n        //Bring in data\n        labels: expenseArray.map(data => data.categories),\n        datasets: [{\n          label: \"Expense Result\",\n          data: expenseArray.map(data => data.amount),\n          backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(255, 206, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(255, 159, 64, 0.2)\"],\n          borderColor: [\"rgba(255, 99, 132, 1)\", \"rgba(54, 162, 235, 1)\", \"rgba(255, 206, 86, 1)\", \"rgba(75, 192, 192, 1)\", \"rgba(153, 102, 255, 1)\", \"rgba(255, 159, 64, 1)\"],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        //Customize chart options\n        legend: {\n          labels: {\n            fontSize: 22\n          }\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              beginAtZero: true,\n              fontSize: 22\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              fontSize: 22\n            }\n          }]\n        }\n      }\n    });\n  }\n\n  render() {\n    // const grouped = this.groupBy(this.props.expenseArray, pet => pet.categories);\n    // const groupedBy = () => {\n    //   const food = grouped.get(\"food\");\n    //   const save = grouped.get(\"saving\")\n    //   return {food, save}\n    // }\n    const groupedMap = () => {\n      // console.log(groupedBy());\n      const a = Object.values(groupedBy());\n      const x = a.map(b => {\n        return b;\n      });\n      x.reduce((c, d) => {\n        // console.log(typeof d);\n        console.log(d); // console.log(d.map((e) => {\n        //   console.log(e.amount);\n        // }))\n        // console.log(d.amount);\n        // return parseFloat(d.amount)\n      }, 0); // groupedBy().map((data) => {\n      //   console.log(data);\n      //   // return data\n      // })\n    }; // groupedMap()\n\n\n    groupBy = function (xs, key) {\n      return xs.reduce(function (rv, x) {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n      }, {});\n    };\n\n    console.log(groupBy(['food', 'saving'], 'amount')); // console.log(this.props.expenseArray);\n    // const array1 = this.reduceArray(this.props.expenseArray)\n    // console.log(array1);\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, this.handleTotal() >= 0 ? React.createElement(\"h3\", {\n      className: \"colorPositive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \" Balance: $ \", this.handleTotal(), \" \") : React.createElement(\"h3\", {\n      className: \"colorNegative\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \" Balance: $ \", this.handleTotal(), \" \"), React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Result;","map":{"version":3,"sources":["/Users/tiffanywong/Documents/juno/bootcamp/week6/tiffanyWongProjectFive/src/Result.js"],"names":["React","Component","Chart","Result","chartRef","createRef","state","labels","reduceArray","objectArray","property","handleSubtotal","array","reduce","a","b","parseFloat","toFixed","handleTotal","arr1","props","incomeAmountArray","arr2","expenseAmountArray","groupBy","list","keyGetter","map","Map","forEach","item","key","collection","get","set","push","componentDidUpdate","myChartRef","current","getContext","expenseArray","expenseCat","type","data","categories","datasets","label","amount","backgroundColor","borderColor","borderWidth","options","legend","fontSize","scales","xAxes","ticks","beginAtZero","yAxes","render","groupedMap","Object","values","groupedBy","x","c","d","console","log","xs","rv"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Chart from \"chart.js\";\n\nclass Result extends Component {\n  chartRef = React.createRef();\n  state = {\n    labels: []\n  }\n\n  reduceArray = (objectArray, property) => {\n    // objectArray.reduce((total, trans) => {\n    //   console.log(total, trans.categories); \n\n    //   if (trans.categories) {\n    //     let amount = parseFloat(trans.amount)\n    //     total += amount\n    //     // data.amount = amount\n    //     console.log(total,amount);\n    //     trans.amount = total\n    //   }\n    //   console.log(trans);\n    //   return total\n    // }, 0)\n    \n    // return objectArray.reduce((acc,obj) => {\n    //   console.log(acc, obj, property);\n      \n    //   let key = obj[property]\n    //   if (!acc[key]) {\n    //     acc[key] = []\n    //   }\n    //   acc[key].push(obj)\n    //   return acc\n    // }, {})\n  }\n\n  groupBy(list, keyGetter) {\n    const map = new Map();\n    list.forEach((item) => {\n      const key = keyGetter(item);\n      const collection = map.get(key);\n      if (!collection) {\n        map.set(key, [item]);\n      } else {\n        collection.push(item);\n      }\n    });\n    return map;\n  }\n\n\n  handleSubtotal = (array) => {\n    return array.reduce((a, b) =>\n      parseFloat(a) + parseFloat(b), 0\n    ).toFixed(2)\n  }\n  componentDidUpdate() {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    const {expenseArray, expenseAmountArray, expenseCat} = this.props\n    new Chart(myChartRef, {\n      type: \"horizontalBar\",\n      data: {\n        //Bring in data\n        labels: expenseArray.map((data) => data.categories),\n        datasets: [\n          {\n            label: \"Expense Result\",\n            data: expenseArray.map((data) => data.amount),\n            backgroundColor: [\n              \"rgba(255, 99, 132, 0.2)\",\n              \"rgba(54, 162, 235, 0.2)\",\n              \"rgba(255, 206, 86, 0.2)\",\n              \"rgba(75, 192, 192, 0.2)\",\n              \"rgba(153, 102, 255, 0.2)\",\n              \"rgba(255, 159, 64, 0.2)\"\n            ],\n            borderColor: [\n              \"rgba(255, 99, 132, 1)\",\n              \"rgba(54, 162, 235, 1)\",\n              \"rgba(255, 206, 86, 1)\",\n              \"rgba(75, 192, 192, 1)\",\n              \"rgba(153, 102, 255, 1)\",\n              \"rgba(255, 159, 64, 1)\"\n            ],\n            borderWidth: 1\n          }\n        ],\n      },\n      options: {\n        //Customize chart options\n        legend: {\n          labels: {\n            fontSize: 22\n          }\n        },\n        scales: {\n          xAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n                fontSize: 22\n              }\n            }\n          ],\n          yAxes: [\n            {\n              ticks: {\n                fontSize: 22\n              }\n            }\n          ]\n        }\n      }\n    });\n  }\n\n  handleSubtotal = (array) => {\n    return array.reduce((a, b) =>\n      parseFloat(a) + parseFloat(b), 0\n    ).toFixed(2)\n  }\n\n  handleTotal = () => {\n    const arr1 = this.handleSubtotal(this.props.incomeAmountArray);\n    const arr2 = this.handleSubtotal(this.props.expenseAmountArray);\n    return (arr1 - arr2).toFixed(2)\n  }\n\n  render() {\n    // const grouped = this.groupBy(this.props.expenseArray, pet => pet.categories);\n\n    // const groupedBy = () => {\n    //   const food = grouped.get(\"food\");\n    //   const save = grouped.get(\"saving\")\n    //   return {food, save}\n    // }\n\n    const groupedMap = () => {\n      // console.log(groupedBy());\n      const a = Object.values(groupedBy())\n\n      const x = a.map((b) => {\n        return b\n      })\n      \n      x.reduce((c,d) => {\n        // console.log(typeof d);\n        console.log(d);\n        \n        // console.log(d.map((e) => {\n        //   console.log(e.amount);\n          \n        // }))\n        // console.log(d.amount);\n        // return parseFloat(d.amount)\n      }, 0)\n      // groupedBy().map((data) => {\n      //   console.log(data);\n      //   // return data\n      // })\n    }\n    \n    // groupedMap()\n\n    groupBy = function (xs, key) {\n      return xs.reduce(function (rv, x) {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n      }, {});\n    };\n\n    console.log(groupBy(['food', 'saving'], 'amount'));\n    // console.log(this.props.expenseArray);\n\n    \n    // const array1 = this.reduceArray(this.props.expenseArray)\n    // console.log(array1);\n    \n    return (\n      <div>\n        {this.handleTotal() >= 0 ?\n\n          <h3 className=\"colorPositive\"> Balance: $ {this.handleTotal()} </h3>\n\n          :\n\n        <h3 className=\"colorNegative\"> Balance: $ {this.handleTotal()} </h3>}\n        <canvas\n          id=\"myChart\"\n          ref={this.chartRef}\n      />\n      </div>\n    )\n  }\n}\n\nexport default Result"]},"metadata":{},"sourceType":"module"}