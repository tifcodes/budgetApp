{"version":3,"sources":["Header.js","firebase.js","Column.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","dbRef","database","ref","ShowColumn","handleDelete","event","child","target","id","remove","handleSubtotal","array","reduce","a","b","parseFloat","toFixed","handleTotal","props","incomeArray","expenseArray","className","this","listTrans","map","trans","i","transObject","type","key","aria-hidden","transKey","onClick","description","amount","Component","Footer","App","handleChangeType","setState","value","handleDescription","handleAmountChange","handleSubmit","preventDefault","transToBeAdded","state","push","handleReset","transList","on","snapshot","val","newTrans","newIncomeArray","newExpenseArray","singleTrans","isEnabled","length","onChange","onSubmit","htmlFor","placeholder","min","step","disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eaf355ff.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n  return (\n    <header>\n      <h1> budget app</h1>\n    </header>\n  )\n}\n\nexport default Header;","import firebase from \"firebase/app\"\nimport \"firebase/database\"\nimport \"firebase/auth\"\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCjI3Akd0ByoWLLk4jhRqiC5S9ROEQPKfs\",\n  authDomain: \"budget-app-6f2e9.firebaseapp.com\",\n  databaseURL: \"https://budget-app-6f2e9.firebaseio.com\",\n  projectId: \"budget-app-6f2e9\",\n  storageBucket: \"budget-app-6f2e9.appspot.com\",\n  messagingSenderId: \"472155372575\",\n  appId: \"1:472155372575:web:b34d0ba760d2fa7c22e92a\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n\n// const dbRef = firebase.database().ref();\n\nexport default firebase;","import React, { Component } from \"react\";\nimport firebase from './firebase'\n\nconst dbRef = firebase.database().ref();\n\nclass ShowColumn extends Component {\n  handleDelete = (event) => {\n    dbRef.child(event.target.id).remove();\n  }\n\n  handleSubtotal = (array) => {\n    return array.reduce((a,b) => \n      parseFloat(a) + parseFloat(b), 0\n    ).toFixed(2)\n  }\n\n  handleTotal = () => {\n    const arr1 = this.handleSubtotal(this.props.incomeArray);\n    const arr2 = this.handleSubtotal(this.props.expenseArray);\n    return (arr1 - arr2).toFixed(2)\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"flexParent\">\n          <div>\n            <h2> Income </h2>\n            <ul>\n              {this.props.listTrans.map((trans, i) => {\n                const isType = trans.transObject.type === \"income\"\n                return (\n                  (isType) ?\n\n                    <li key={i}> \n                    <i className=\"fa fa-minus-circle\" aria-hidden=\"true\" \n                    id={trans.transKey} onClick={this.handleDelete}> </i>  {trans.transObject.description\n                    } : {trans.transObject.amount} </li>\n\n                    : null\n                )\n              })}\n            </ul>\n            <h4 className=\"colorPop\"> Total : $ {this.handleSubtotal(this.props.incomeArray)} </h4>\n          </div>\n          <div>\n            <h2> Expenses </h2>\n            <ul>\n              {this.props.listTrans.map((trans, i) => {\n                const isType = trans.transObject.type === \"expense\"\n                return (\n                  (isType) ?\n\n                    <li key={i}> \n                    <i className=\"fa fa-minus-circle\" aria-hidden=\"true\" id={trans.transKey} onClick={this.handleDelete}></i>  {trans.transObject.description\n                    } : {trans.transObject.amount} </li>\n\n                    : null\n                )\n              })}\n            </ul>\n            <h4 className=\"colorPop\"> Total: $ {this.handleSubtotal(this.props.expenseArray)} </h4>\n          </div>\n        </div>\n        <div>\n          {this.handleTotal() >= 0 ?\n\n            <h3 className=\"colorPositive\"> Balance: $ {this.handleTotal()} </h3>\n\n            :\n\n            <h3 className=\"colorNegative\"> Balance: $ {this.handleTotal()} </h3>}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ShowColumn;","import React from 'react';\n\nfunction Footer() {\n  return (\n    <footer>\n      <p> Copyright Â© Tiffany Wong 2020</p>\n    </footer>\n  )\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport \"./styles/style.scss\"\n\nimport Header from \"./Header\"\nimport firebase from './firebase'\nimport ShowColumn from './Column'\nimport Footer from './Footer'\n\nconst dbRef = firebase.database().ref();\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      transList: [],\n      incomeArray: [],\n      expenseArray: [],\n      description: \"\",\n      amount: \"\",\n      type: \"select\",\n    }\n  }\n\n  // listening to firebase\n  componentDidMount() {\n    dbRef.on(\"value\", (snapshot) => {\n      const trans = snapshot.val();\n\n      const newTrans = [];\n      const newIncomeArray = [];\n      const newExpenseArray = [];\n\n      for (let i in trans) {\n        const singleTrans = {\n          transKey: i,\n          transObject: trans[i],\n        }\n        newTrans.push(singleTrans)\n\n        if (singleTrans.transObject.type === \"income\") {\n          newIncomeArray.push(singleTrans.transObject.amount)\n        }\n\n        if (singleTrans.transObject.type === \"expense\") {\n          newExpenseArray.push(singleTrans.transObject.amount)\n        }\n      }\n\n      this.setState({\n        transList: newTrans,\n        incomeArray: newIncomeArray,\n        expenseArray: newExpenseArray,\n      })\n    })\n  }\n\n  // changing the income and expense drop down\n  handleChangeType = (event) => {\n    this.setState({\n      type: event.target.value\n    })\n  }\n\n  // listening to changes in the description\n  handleDescription = (event) => {\n    this.setState({\n      description: event.target.value,\n    })\n  }\n\n  // listening to changes in the amount\n  handleAmountChange = (event) => {\n    this.setState({\n      amount: event.target.value,\n    })\n  }\n\n  // submit \n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const transToBeAdded = {\n      description: this.state.description,\n      amount: this.state.amount,\n      type: this.state.type\n    }\n\n    if (transToBeAdded.description !== \"\" && transToBeAdded.amount !== \"\" && transToBeAdded.type !== \"\") {\n      dbRef.push(transToBeAdded)\n      this.setState({\n        description: \"\",\n        amount: \"\",\n      })\n    }\n  }\n\n  handleReset = () => {\n    this.setState({\n      description: \"\",\n      amount: \"\",\n      type: \"\"\n    })\n  }\n\n  render() {\n    const { description, amount, type, incomeArray, expenseArray, transList } = this.state\n    const isEnabled = description.length > 0 && amount.length > 0\n    return (\n      <div className=\"wrapper\">\n        <Header />\n        {/* dropdown menu */}\n        <main>\n          <select \n          onChange={this.handleChangeType} value={type}>\n            <option value=\"\" > select </option>\n            <option value=\"income\"> income </option>\n            <option value=\"expense\"> expense </option>\n          </select>\n          {/* form */}\n          <form onSubmit={this.handleSubmit}>\n            <label htmlFor=\"transType\" className=\"visuallyHidden\"></label>\n            <input id=\"transType\" type=\"text\" placeholder=\"description\" \n            value={description} onChange={this.handleDescription} />\n            <label htmlFor=\"transAmount\" className=\"visuallyHidden\"></label>\n            <input id=\"transAmount\" type=\"number\" placeholder=\"amount\" min=\"0\" step=\".01\" \n            value={amount} \n            onChange={this.handleAmountChange} />\n            <button disabled={!isEnabled} type=\"submit\"> Add Transaction to List</button>\n            <button type=\"button\" onClick={this.handleReset} > Reset </button>\n          </form>\n          {/* column */}\n          <ShowColumn \n          incomeArray={incomeArray} expenseArray={expenseArray}\n          listTrans={transList} />\n        </main>\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}