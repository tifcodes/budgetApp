{"version":3,"sources":["Header.js","firebase.js","Column.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","dbRef","database","ref","ShowColumn","handleDelete","event","child","target","id","remove","finalIncomeTotal","this","props","arrayIncome","reduce","a","b","parseFloat","finalExpenseTotal","arrayExpense","finalTotal","className","listTransaction","map","transaction","i","transactionObject","type","key","aria-hidden","transactionKey","onClick","userInput","amount","toFixed","Component","Footer","App","handleChangeType","setState","value","handleUserInputChange","handleAmountChange","handleSubmit","preventDefault","transactionToBeAdded","state","push","transactionList","incomeArray","expenseArray","selectedValue","label","on","snapshot","val","newTransaction","newIncomeArray","newExpenseArray","individualTransactions","console","log","isEnabled","length","onChange","onSubmit","htmlFor","placeholder","min","step","disabled","delete","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5e34c86.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// const enterName = prompt(\"Please enter your name\")\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      {/* <h1> {enterName}'s budget app </h1> */}\r\n      <h1> budget app</h1>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import firebase from \"firebase/app\"\r\nimport \"firebase/database\"\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCjI3Akd0ByoWLLk4jhRqiC5S9ROEQPKfs\",\r\n  authDomain: \"budget-app-6f2e9.firebaseapp.com\",\r\n  databaseURL: \"https://budget-app-6f2e9.firebaseio.com\",\r\n  projectId: \"budget-app-6f2e9\",\r\n  storageBucket: \"budget-app-6f2e9.appspot.com\",\r\n  messagingSenderId: \"472155372575\",\r\n  appId: \"1:472155372575:web:b34d0ba760d2fa7c22e92a\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst dbRef = firebase.database().ref();\r\n\r\nexport default dbRef;","import React, { Component } from \"react\";\r\nimport dbRef from './firebase'\r\n\r\nclass ShowColumn extends Component {\r\n  handleDelete = (event) => {\r\n    dbRef.child(event.target.id).remove();\r\n  }\r\n\r\n  render() {\r\n    const finalIncomeTotal = this.props.arrayIncome.reduce((a, b) => parseFloat(a) + parseFloat(b), 0)\r\n    const finalExpenseTotal = this.props.arrayExpense.reduce((a, b) => parseFloat(a) + parseFloat(b), 0)\r\n    const finalTotal = finalIncomeTotal - finalExpenseTotal;\r\n    return (\r\n      <div>\r\n        <div className=\"flexParent\">\r\n          <div>\r\n            <h2> Income </h2>\r\n            <ul>\r\n              {this.props.listTransaction.map((transaction, i) => {\r\n                const isType = transaction.transactionObject.type === \"income\"\r\n                return (\r\n                  (isType) ?\r\n\r\n                    <li key={i}> <i className=\"fa fa-minus-circle\" aria-hidden=\"true\" id={transaction.transactionKey} onClick={this.handleDelete}> </i>  {transaction.transactionObject.userInput\r\n                    } : {transaction.transactionObject.amount} </li>\r\n\r\n                    : null\r\n                )\r\n              })}\r\n            </ul>\r\n            <h4 className=\"colorPop\"> Total : $ {finalIncomeTotal.toFixed(2)} </h4>\r\n          </div>\r\n          <div>\r\n            <h2> Expenses </h2>\r\n            <ul>\r\n              {this.props.listTransaction.map((transaction, i) => {\r\n                const isType = transaction.transactionObject.type === \"expense\"\r\n                return (\r\n                  (isType) ?\r\n\r\n                    <li key={i}> <i className=\"fa fa-minus-circle\" aria-hidden=\"true\" id={transaction.transactionKey} onClick={this.handleDelete}></i>  {transaction.transactionObject.userInput\r\n                    } : {transaction.transactionObject.amount} </li>\r\n\r\n                    : null\r\n                )\r\n              })}\r\n            </ul>\r\n            <h4 className=\"colorPop\"> Total: $ {finalExpenseTotal.toFixed(2)} </h4>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          {finalTotal.toFixed(2) > 0 ?\r\n\r\n            <h3 className=\"colorPositive\"> Balance: $ {finalTotal.toFixed(2)} </h3>\r\n\r\n            :\r\n\r\n            <h3 className=\"colorNegative\"> Balance: $ {finalTotal.toFixed(2)} </h3>}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ShowColumn;","import React from 'react';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer>\r\n      <p> Copyright Â© Tiffany Wong 2019</p>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport \"./styles/style.scss\"\n\nimport Header from \"./Header\"\nimport dbRef from './firebase'\nimport ShowColumn from './Column'\nimport Footer from './Footer'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      transactionList: [],\n      incomeArray: [],\n      expenseArray: [],\n      userInput: \"\",\n      amount: \"\",\n      type: \"\",\n      selectedValue: {label: \"select\"},\n    }\n  }\n\n  componentDidMount() {\n    dbRef.on(\"value\", (snapshot) => {\n      const transaction = snapshot.val();\n\n      const newTransaction = [];\n      const newIncomeArray = [];\n      const newExpenseArray = [];\n\n      for (let i in transaction) {\n        const individualTransactions = {\n          transactionKey: i,\n          transactionObject: transaction[i],\n        }\n        newTransaction.push(individualTransactions)\n\n        if (individualTransactions.transactionObject.type === \"income\") {\n          newIncomeArray.push(individualTransactions.transactionObject.amount)\n        }\n\n        if (individualTransactions.transactionObject.type === \"expense\") {\n          newExpenseArray.push(individualTransactions.transactionObject.amount)\n        }\n      }\n\n      this.setState({\n        transactionList: newTransaction,\n        incomeArray: newIncomeArray,\n        expenseArray: newExpenseArray,\n      })\n    })\n  }\n\n  handleChangeType = (event) => {\n    this.setState({\n      type: event.target.value\n    })\n  }\n\n  handleUserInputChange = (event) => {\n    this.setState({\n      userInput: event.target.value,\n    })\n  }\n\n  handleAmountChange = (event) => {\n    this.setState({\n      amount: event.target.value,\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const transactionToBeAdded = {\n      userInput: this.state.userInput,\n      amount: this.state.amount,\n      type: this.state.type\n    }\n\n    if (transactionToBeAdded.userInput !== \"\" && transactionToBeAdded.amount !== \"\" && transactionToBeAdded.type !== \"\") {\n      dbRef.push(transactionToBeAdded)\n      this.setState({\n        userInput: \"\",\n        amount: \"\",\n      })\n    }\n  }\n\n  // handleReset = (event) => {\n  //   this.setState({\n  //     userInput: \"\",\n  //     amount: \"\",\n  //   })\n  // }\n\n  render() {\n    console.log(this.state.type)\n    const { userInput, amount } = this.state\n    const isEnabled = userInput.length > 0 && amount.length > 0\n    return (\n      <div className=\"wrapper\">\n        <Header />\n        <main>\n          <select onChange={this.handleChangeType} value={this.state.value}>\n            <option value=\"null\" > select </option>\n            <option value=\"income\"> income </option>\n            <option value=\"expense\"> expense </option>\n          </select>\n          <form onSubmit={this.handleSubmit}>\n            <label htmlFor=\"transactionType\" className=\"visuallyHidden\"></label>\n            <input id=\"transactionType\" type=\"text\" placeholder=\"description\" value={this.state.userInput} onChange={this.handleUserInputChange} />\n            <label htmlFor=\"transactionAmount\" className=\"visuallyHidden\"></label>\n            <input id=\"transactionAmount\" type=\"number\" placeholder=\"amount\" min=\"0\" step=\".01\" value={this.state.amount} onChange={this.handleAmountChange} />\n            <button disabled={!isEnabled} type=\"submit\"> Add Transaction to List</button>\n            {/* <button type=\"button\" onClick={this.handleReset} > Reset </button> */}\n          </form>\n          <ShowColumn arrayIncome={this.state.incomeArray} arrayExpense={this.state.expenseArray} listTransaction={this.state.transactionList} delete={this.state.handleDelete} />\n        </main>\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}