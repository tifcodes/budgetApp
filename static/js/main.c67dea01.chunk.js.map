{"version":3,"sources":["Header.js","firebase.js","Form.js","Column.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","dbRef","database","ref","Form","handleChangeType","event","setState","type","target","value","handleDescription","description","handleAmountChange","amount","handleSubmit","preventDefault","transToBeAdded","state","push","handleReset","on","snapshot","trans","val","newTrans","newIncomeArray","newExpenseArray","i","singleTrans","transKey","transObject","transList","incomeArray","expenseArray","this","isEnabled","length","onChange","onSubmit","htmlFor","className","id","placeholder","min","step","disabled","onClick","Component","ShowColumn","handleDelete","child","remove","handleSubtotal","array","reduce","a","b","parseFloat","toFixed","handleTotal","props","map","key","aria-hidden","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c67dea01.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n  return (\n    <header>\n      <h1> budget app</h1>\n    </header>\n  )\n}\n\nexport default Header;","import firebase from \"firebase/app\"\nimport \"firebase/database\"\nimport \"firebase/auth\"\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCjI3Akd0ByoWLLk4jhRqiC5S9ROEQPKfs\",\n  authDomain: \"budget-app-6f2e9.firebaseapp.com\",\n  databaseURL: \"https://budget-app-6f2e9.firebaseio.com\",\n  projectId: \"budget-app-6f2e9\",\n  storageBucket: \"budget-app-6f2e9.appspot.com\",\n  messagingSenderId: \"472155372575\",\n  appId: \"1:472155372575:web:b34d0ba760d2fa7c22e92a\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst dbRef = firebase.database().ref();\n\nexport default dbRef;","import React, { Component } from 'react';\n\nimport dbRef from './firebase'\n\nclass Form extends Component {\n  constructor() {\n    super();\n    this.state = {\n      description: \"\",\n      amount: \"\",\n      type: \"select\",\n    }\n  }\n\n  // listening to firebase\n  componentDidMount() {\n    dbRef.on(\"value\", (snapshot) => {\n      const trans = snapshot.val();\n\n      const newTrans = [];\n      const newIncomeArray = [];\n      const newExpenseArray = [];\n\n      for (let i in trans) {\n        const singleTrans = {\n          transKey: i,\n          transObject: trans[i],\n        }\n        newTrans.push(singleTrans)\n\n        if (singleTrans.transObject.type === \"income\") {\n          newIncomeArray.push(singleTrans.transObject.amount)\n        }\n\n        if (singleTrans.transObject.type === \"expense\") {\n          newExpenseArray.push(singleTrans.transObject.amount)\n        }\n      }\n\n      this.setState({\n        transList: newTrans,\n        incomeArray: newIncomeArray,\n        expenseArray: newExpenseArray,\n      })\n    })\n  }\n\n  // changing the income and expense drop down\n  handleChangeType = (event) => {\n    this.setState({\n      type: event.target.value\n    })\n  }\n\n  // listening to changes in the description\n  handleDescription = (event) => {\n    this.setState({\n      description: event.target.value,\n    })\n  }\n\n  // listening to changes in the amount\n  handleAmountChange = (event) => {\n    this.setState({\n      amount: event.target.value,\n    })\n  }\n\n  // submit \n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const transToBeAdded = {\n      description: this.state.description,\n      amount: this.state.amount,\n      type: this.state.type\n    }\n\n    if (transToBeAdded.description !== \"\" && transToBeAdded.amount !== \"\" && transToBeAdded.type !== \"\") {\n      dbRef.push(transToBeAdded)\n      this.setState({\n        description: \"\",\n        amount: \"\",\n      })\n    }\n  }\n\n  handleReset = () => {\n    this.setState({\n      description: \"\",\n      amount: \"\",\n      type: \"\"\n    })\n  }\n\n  render() {\n    const { description, amount, type} = this.state\n    const isEnabled = description.length > 0 && amount.length > 0\n    return (\n      <div>\n        {/* dropdown menu */}\n          <select\n            onChange={this.handleChangeType} value={type}>\n            <option value=\"\" > select </option>\n            <option value=\"income\"> income </option>\n            <option value=\"expense\"> expense </option>\n          </select>\n          {/* form */}\n          <form onSubmit={this.handleSubmit}>\n            <label htmlFor=\"transType\" className=\"visuallyHidden\"></label>\n            <input id=\"transType\" type=\"text\" placeholder=\"description\"\n              value={description} onChange={this.handleDescription} />\n            <label htmlFor=\"transAmount\" className=\"visuallyHidden\"></label>\n            <input id=\"transAmount\" type=\"number\" placeholder=\"amount\" min=\"0\" step=\".01\"\n              value={amount}\n              onChange={this.handleAmountChange} />\n            <button disabled={!isEnabled} type=\"submit\"> Add Transaction to List</button>\n            <button type=\"button\" onClick={this.handleReset} > Reset </button>\n          </form>\n      </div>\n    )\n  }\n}\n\nexport default Form;","import React, { Component } from \"react\";\nimport dbRef from './firebase'\n\n\nclass ShowColumn extends Component {\n  handleDelete = (event) => {\n    dbRef.child(event.target.id).remove();\n  }\n\n  handleSubtotal = (array) => {\n    return array.reduce((a,b) => \n      parseFloat(a) + parseFloat(b), 0\n    ).toFixed(2)\n  }\n\n  handleTotal = () => {\n    const arr1 = this.handleSubtotal(this.props.incomeArray);\n    const arr2 = this.handleSubtotal(this.props.expenseArray);\n    return (arr1 - arr2).toFixed(2)\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"flexParent\">\n          <div>\n            <h2> Income </h2>\n            <ul>\n              {this.props.transList.map((trans, i) => {\n                const isType = trans.transObject.type === \"income\"\n                return (\n                  (isType) ?\n\n                    <li key={i}> \n                    <i className=\"fa fa-minus-circle\" aria-hidden=\"true\" \n                    id={trans.transKey} onClick={this.handleDelete}> </i>  {trans.transObject.description\n                    } : {trans.transObject.amount} </li>\n\n                    : null\n                )\n              })}\n            </ul>\n            <h4 className=\"colorPop\"> Total : $ {this.handleSubtotal(this.props.incomeArray)} </h4>\n          </div>\n          <div>\n            <h2> Expenses </h2>\n            <ul>\n              {this.props.transList.map((trans, i) => {\n                const isType = trans.transObject.type === \"expense\"\n                return (\n                  (isType) ?\n\n                    <li key={i}> \n                    <i className=\"fa fa-minus-circle\" aria-hidden=\"true\" id={trans.transKey} onClick={this.handleDelete}></i>  {trans.transObject.description\n                    } : {trans.transObject.amount} </li>\n\n                    : null\n                )\n              })}\n            </ul>\n            <h4 className=\"colorPop\"> Total: $ {this.handleSubtotal(this.props.expenseArray)} </h4>\n          </div>\n        </div>\n        <div>\n          {this.handleTotal() >= 0 ?\n\n            <h3 className=\"colorPositive\"> Balance: $ {this.handleTotal()} </h3>\n\n            :\n\n            <h3 className=\"colorNegative\"> Balance: $ {this.handleTotal()} </h3>}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ShowColumn;","import React from 'react';\n\nfunction Footer() {\n  return (\n    <footer>\n      <p> Copyright © Tiffany Wong 2020</p>\n    </footer>\n  )\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport \"./styles/style.scss\"\n\nimport Header from \"./Header\"\nimport Form from \"./Form\"\nimport dbRef from './firebase'\nimport ShowColumn from './Column'\nimport Footer from './Footer'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      transList: [],\n      incomeArray: [],\n      expenseArray: [],\n    }\n  }\n\n  // listening to firebase\n  componentDidMount() {\n    dbRef.on(\"value\", (snapshot) => {\n      const trans = snapshot.val();\n\n      const newTrans = [];\n      const newIncomeArray = [];\n      const newExpenseArray = [];\n\n      for (let i in trans) {\n        const singleTrans = {\n          transKey: i,\n          transObject: trans[i],\n        }\n        newTrans.push(singleTrans)\n\n        if (singleTrans.transObject.type === \"income\") {\n          newIncomeArray.push(singleTrans.transObject.amount)\n        }\n\n        if (singleTrans.transObject.type === \"expense\") {\n          newExpenseArray.push(singleTrans.transObject.amount)\n        }\n      }\n\n      this.setState({\n        transList: newTrans,\n        incomeArray: newIncomeArray,\n        expenseArray: newExpenseArray,\n      })\n    })\n  }\n\n  render() {\n    const {incomeArray, expenseArray, transList} = this.state\n    return (\n      <div className=\"wrapper\">\n        <Header />\n        {/* dropdown menu */}\n        <main>\n          {/* form */}\n          <Form />\n          {/* column */}\n          <ShowColumn \n          incomeArray={incomeArray} \n          expenseArray={expenseArray}\n          transList=\n          {transList} />\n        </main>\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}